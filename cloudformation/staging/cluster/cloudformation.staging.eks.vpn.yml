AWSTemplateFormatVersion: '2010-09-09'
Description: Flask Api Open VPN Stack

Parameters:
  OpenVPNPortNumber:
    Description: UDP port number opened in SG for OpenVPN
    Type: Number

  VPNInstanceKeyName:
    Description: SSH Key for OpenVPN EC2 instance
    Type: AWS::EC2::KeyPair::KeyName

  LocalConnectionIP:
    Type: String
    Description: Local IP Address used for SSH (temp)

  QSS3KeyPrefix:
    Type: String

  TargetVpc:
    Description: Vpc in which following VPN will be deployed to
    Type: AWS::EC2::VPC::Id

  TargetSubnet:
    Description: Select the target subnet for ALB deployment
    Type: AWS::EC2::Subnet::Id

  VPNSecurityGroup:
    Type: String

Mappings:
  EC2AmiRegionMap:
    # TODO: Include all most recent AMZLinux AMIs, Evaluate Community "Openvpn Access Server AMI"
    # TODO: Dynamic retrieval of suitable ami
    eu-central-1: # Frankfurt
      "AMAZONLINUXAMI": "ami-00aa4671cbf840d82"   # Amazon Linux 2 AMI (HVM)
    # eu-west-1: # Ireland
    #   "AMAZONLINUXAMI": "ami-0559cd7c"   # amzn-ami-hvm-2017.09.1.20180103-x86_64-ebs
    # eu-west-1: # London

Resources:

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  AssociateEIPwithENI:    # Bind EIP to ENI
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      NetworkInterfaceId: !Ref OpenVPNNetworkInterface

#  # TODO: Move to security groups template
#  OpenVPNInstanceSG:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: SG for OpenVPN EC2 Instance
#      VpcId: !Ref TargetVpc
#      SecurityGroupIngress:
#        - IpProtocol: udp
#          FromPort: !Ref OpenVPNPortNumber
#          ToPort: !Ref OpenVPNPortNumber
#          CidrIp: !Ref LocalConnectionIP
#          # UNCOMMENT FOR TROUBLESHOOTING ONLY!
#          # This will allow access from public IP
#          # - IpProtocol: tcp
#          #   FromPort: 22
#          #   ToPort: 22
#          #   CidrIp: !Ref LocalConnectionIP

  OpenVPNNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref TargetSubnet
      Description: VPC Network Interface attached to public subnet
      GroupSet:
      - !Ref VPNSecurityGroup
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: vpn-public-eni

  # ---------------- EC2 OpenVPN Role-------------------------------

  # Create S3 Role for EC2 OpenVPN Instance
  EC2OpenVPNInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  EC2OpenVPNInstanceS3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EC2OpenVPNInstanceS3AccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource: "*"
      Roles:
        - !Ref EC2OpenVPNInstanceRole

  EC2OpenVPNattachPolicyToRole:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2OpenVPNInstanceRole

  # ---------------- EC2 OpenVPN Instance--------------------------

  EC2OpenVPNInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [EC2AmiRegionMap, !Ref "AWS::Region", AMAZONLINUXAMI]
      # NOTE: ONLY CHANGE WITH CAUTION t3.micro CURRENTLY CRASHES 2019-10-14
      InstanceType: t2.micro
      SourceDestCheck: false
      KeyName: !Ref VPNInstanceKeyName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref OpenVPNNetworkInterface
          DeviceIndex: 0
      IamInstanceProfile: !Ref EC2OpenVPNattachPolicyToRole
      Tags:
        - Key: Name
          Value: -openvpn-ec2
      UserData:
          # cfn-init runs a configset on the ec2 after having retrieved all necessary template parameters
          # cfn-signal just signals the Cloudformation build to proceed or finish
          "Fn::Base64":
            !Sub |
              #!/bin/bash
              yum update -y aws-cfn-bootstrap
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2OpenVPNInstance --configsets OpenVPNInstanceConfigSet --region ${AWS::Region}
              yum -y update
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2OpenVPNInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT10M
    Metadata:
      # In general, AWS::Cloudformation::Init is used specifically for running cfn-init scripts
      # DEBUGGING cfn-init: SSH into EC2 and review /var/log/cfn-init.log
      AWS::CloudFormation::Init:
        configSets:
          OpenVPNInstanceConfigSet:
            - "optional_configure_cfn"
            - "step0_enable_epel"
            - "step1_install_software"
            - "step2_generate_secrets_server"
            - "step3_generate_client"
            - "step4_configure_server"
            - "step5_upload_files"
        # [OPTIONAL] Allow dynamic inplace update-stack changes by utilizing cfn-hup
        optional_configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2OpenVPNInstance.Metadata.AWS::Cloudformation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2OpenVPNInstance --configsets OpenVPNInstanceConfigSet --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=1
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        step0_enable_epel:
          commands:
            a_enable_epel:
              # If epel not enabled continue with command, otherwise skip
              test: "test -z $(grep -Fx '[amzn2extra-epel]' /etc/yum.repos.d/amzn2-extras.repo)"
              command: 'amazon-linux-extras install epel'
              ignoreErrors: "false"
        step1_install_software:
          packages:
            yum:
              epel-release: []
              openvpn: []
              easy-rsa: []
          commands:
            a_create_rsadir:
              test: "[ ! -d /etc/openvpn/easy-rsa ]"
              command: "mkdir -p /etc/openvpn/easy-rsa"
            b_change_rsadir:
              test: "[ -d '/usr/share/easy-rsa/3.0' ]"
              command: "cp -rf /usr/share/easy-rsa/3.0/* /etc/openvpn/easy-rsa/"
        step2_generate_secrets_server:
          # Use easy-rsa to generate the certificate authority (CA) and encryption keys
          commands:
            a_generate_secrets_clean_keysdir:
              cwd: "/etc/openvpn/easy-rsa"
              test: "! test -e /etc/openvpn/easy-rsa/pki"
              command: "./easyrsa init-pki"
            b_generate_secrets_run_build_ca:
              cwd: "/etc/openvpn/easy-rsa"
              test: "[ ! -f /etc/openvpn/easy-rsa/pki/ca.crt ]"
              command: "./easyrsa --batch build-ca nopass"
            c_generate_secrets_run_build_ca:
              cwd: "/etc/openvpn/easy-rsa"
              test: "[ ! -f /etc/openvpn/easy-rsa/pki/dh.pem ]"
              command: "./easyrsa gen-dh"
            d_generate_secrets_keypair_request:
              cwd: "/etc/openvpn/easy-rsa"
              test: "[[ ! -f /etc/openvpn/easy-rsa/pki/reqs/vpnserver.req && ! -f /etc/openvpn/easy-rsa/pki/private/vpnserver.key ]]"
              command: "./easyrsa --batch --req-cn=vpnserver gen-req vpnserver nopass"
            e_generate_secrets_sign_ca:
              cwd: "/etc/openvpn/easy-rsa"
              command: "./easyrsa --batch sign server vpnserver"
            f_generate_secrets_create_server_keysdir:
              test: "[ ! -d /etc/openvpn/keys ]"
              command: "mkdir -p /etc/openvpn/keys && chmod 750 /etc/openvpn/keys"
            g_generate_secrets_cp_certs_to_server:
              command: cp -a /etc/openvpn/easy-rsa/pki/ca.crt /etc/openvpn/keys/ && cp -a /etc/openvpn/easy-rsa/pki/dh.pem /etc/openvpn/keys/dh2048.pem
            h_generate_secrets_cp_keys_to_server:
              command: cp -a /etc/openvpn/easy-rsa/pki/issued/vpnserver.crt /etc/openvpn/keys/ && cp -a /etc/openvpn/easy-rsa/pki/private/vpnserver.key /etc/openvpn/keys/
            i_generate_secrets_statictlssecret:
              cwd: "/etc/openvpn"
              test: "[ ! -f /etc/openvpn/statictlssecret.key ]"
              command: "openvpn --genkey --secret statictlssecret.key"
            j_generate_secrets_cp_statictls_to_keys:
              cwd: "/etc/openvpn"
              command: cp -a /etc/openvpn/statictlssecret.key /etc/openvpn/keys/
        step3_generate_client:
          files:
            /etc/openvpn/openvpn_client.conf:
              content: !Sub |
                client
                dev tun
                proto udp
                remote ${EIP} ${OpenVPNPortNumber}
                ca ca.crt
                cert clientuser.crt
                key clientuser.key
                tls-client
                tls-auth statictlssecret.key 1
                tls-version-min 1.2
                tls-cipher TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256:TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256:TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384:TLS-DHE-RSA-WITH-AES-256-CBC-SHA256
                cipher AES-256-CBC
                auth SHA512
                resolv-retry infinite
                auth-retry none
                nobind
                persist-key
                persist-tun
                remote-cert-tls server
                comp-lzo
                verb 3
              mode: "000700"
              owner: root
              group: root
            # TODO: Create key name from ProjectPrefix
            /etc/openvpn/gen_ovpn_profile.sh:
              content: !Sub
                - |
                  (cat /etc/openvpn/openvpn_client.conf
                  echo '<key>'
                  cat /etc/openvpn/keys/clientuser.key
                  echo '</key>'
                  echo '<cert>'
                  cat /etc/openvpn/keys/clientuser.crt
                  echo '</cert>'
                  echo '<ca>'
                  cat /etc/openvpn/keys/ca.crt
                  echo '</ca>'
                  ) > /etc/openvpn/keys/${ProjectPrefix}_vpn_clientuser.ovpn
                - ProjectPrefix: !Ref QSS3KeyPrefix
              mode: "000700"
              owner: root
              group: root
          commands:
            a_generate_clientuser_certs:
              cwd: "/etc/openvpn/easy-rsa"
              test: "[[ ! -f /etc/openvpn/easy-rsa/pki/reqs/clientuser.req && ! -f /etc/openvpn/easy-rsa/pki/private/clientuser.key ]]"
              command: "./easyrsa --batch --req-cn=clientuser gen-req clientuser nopass"
            b_generate_clientuser_sign_ca:
              cwd: "/etc/openvpn/easy-rsa"
              command: "./easyrsa --batch sign client clientuser"
            c_generate_clientuser_cp_keys_to_server:
              command: cp -a /etc/openvpn/easy-rsa/pki/issued/clientuser.crt /etc/openvpn/keys/ && cp -a /etc/openvpn/easy-rsa/pki/private/clientuser.key /etc/openvpn/keys/
            d_generate_clientuser_ovpn_profile:
              cwd: "/etc/openvpn"
              test: "[ -f /etc/openvpn/gen_ovpn_profile.sh ]"
              command: "/etc/openvpn/gen_ovpn_profile.sh"
        step4_configure_server:
          files:
            /etc/openvpn/easy-rsa/server.conf:
              content: !Sub |
                port ${OpenVPNPortNumber}
                proto udp
                dev tun
                server 172.16.0.0 255.255.252.0
                push "redirect-gateway def1"
                ca /etc/openvpn/keys/ca.crt
                cert /etc/openvpn/keys/vpnserver.crt
                key /etc/openvpn/keys/vpnserver.key
                dh /etc/openvpn/keys/dh2048.pem
                tls-server
                tls-auth /etc/openvpn/keys/statictlssecret.key 0
                tls-version-min 1.2
                tls-cipher TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256:TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256:TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384:TLS-DHE-RSA-WITH-AES-256-CBC-SHA256
                cipher AES-256-CBC
                auth SHA512
                ifconfig-pool-persist ipp.txt
                keepalive 10 120
                ping-timer-rem
                comp-lzo
                persist-key
                persist-tun
                status openvpn-status.log
                log-append /var/log/openvpn.log
                verb 3
                max-clients 100
                user nobody
                group nobody
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            a_configure_server_sysctl_ipforward:
              command: echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
            b_configure_server_sysctl_reload:
              command: "sysctl -p"
            c_configure_server_iptables_nat:
              command: "iptables -t nat -A POSTROUTING -s 172.16.0.0/22 -o eth0 -j MASQUERADE"
            d_configure_server_update_config:
              command: "cp -rf /etc/openvpn/easy-rsa/server.conf /etc/openvpn/server.conf"
            e_configure_server_start_service:
              command: "systemctl start openvpn@server.service"
        step5_upload_files:
          commands:
            a_upload_files_compress_zip:
              cwd: "/etc/openvpn/keys"
              # test: "[ ! -f /etc/openvpn/keys/${ProjectPrefix}VPNClient.zip ]"
              command: !Sub
                - |
                  zip ${ProjectPrefix}VPNClient.zip ca.crt statictlssecret.key clientuser.key clientuser.crt ${ProjectPrefix}_vpn_clientuser.ovpn
                - ProjectPrefix: !Ref QSS3KeyPrefix
            b_upload_files_to_s3:
              cwd: "/etc/openvpn/keys"
              # test: "[ -f /etc/openvpn/keys/${ProjectPrefix}VPNClient.zip ]"
              command: !Sub
                - |
                  aws s3 cp ${ProjectPrefix}VPNClient.zip s3://${CertBucketName}/client/${ProjectPrefix}VPNClient.zip
                - CertBucketName: !Ref OpenVPNCertsBucket
                  ProjectPrefix: !Ref QSS3KeyPrefix
            # a_upload_files_compress_tar:
            #   cwd: "/etc/openvpn/keys"
            #   test: "[ ! -f /etc/openvpn/keys/openVPNClientFiles.tar.xz ]"
            #   command: "tar -cvJf ${ProjectPrefix}VPNClient.tar.xz ca.crt statictlssecret.key clientuser.key clientuser.crt ${ProjectPrefix}_vpn_clientuser.ovpn"
            # b_upload_files_to_s3:
            #   cwd: "/etc/openvpn/keys"
            #   test: "[ -f /etc/openvpn/keys/openVPNClientFiles.tar.xz ]"
            #   command: !Sub |
            #   aws s3 cp ${ProjectPrefix}VPNClient.tar.xz s3://${OpenVPNCertBucketName}/client/openVPNClientFiles.tar.xz
            c_upload_files_cfn_init_log_to_s3:
              cwd: "/var/log"
              test: "test -e /var/log/cfn-init.log"
              command: !Sub
                - |
                  aws s3 cp /var/log/cfn-init.log s3://${OpenVPNCertsBucket}/logs/configSets_cfn-init.log
                - CertBucketName: !Ref OpenVPNCertsBucket

  # ---------------- Lambda------------------------------------

  # TODO: Try to cleanup Certs Bucket with existing Lambda (without SQS)
  # [Optionally] Fix with SQS <- using single Lambda for multiple bucket cleanup
  cleanupBucketOnDelete:
    DependsOn: cleanupS3CertsOnDeleteLambda
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "cleanupS3CertsOnDeleteLambda"
          - "Arn"
      BucketName: !Ref OpenVPNCertsBucket

  cleanupS3CertsOnDeleteLambda:
    # Removes all objects from OpenVPNCertsBucket upon cfn Delete
    DependsOn: OpenVPNCertsBucket
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import logging
          # module cfnresponse does not exist for python3.7
          # import cfnresponse
          # Will yield a warning, but is currently the only solution for python3.7
          # since inline code cannot import third party packages
          from botocore.vendored import requests
          from botocore.exceptions import ClientError

          logger = logging.getLogger(__name__)

          def setup(level='DEBUG', boto_level=None, **kwargs):
              logging.root.setLevel(level)

              if not boto_level:
                  boto_level = level

              logging.getLogger('boto').setLevel(boto_level)
              logging.getLogger('boto3').setLevel(boto_level)
              logging.getLogger('botocore').setLevel(boto_level)
              logging.getLogger('urllib3').setLevel(boto_level)

          try:
              setup('DEBUG', formatter_cls=None, boto_level='ERROR')
          except Exception as e:
              logger.error(e, exc_info=True)

          def clean_up_bucket(target_bucket):
              logger.info(f"Clean content of bucket {target_bucket}.")
              s3_resource = boto3.resource('s3')
              try:
                  bucket_response = s3_resource.Bucket(target_bucket).load()
              except ClientError as e:
                  logger.info(f"s3:://{target_bucket} not found. {e}")
                  return
              else:
                  bucket_obj = s3_resource.Bucket(target_bucket)
                  bucket_obj.objects.all().delete()

          def handler(event, context):
              # helper(event, context)

              response_data = {}
              # NOTE: The status value sent by the custom resource provider must be either SUCCESS or FAILED!!
              try:
                  bucket = event['ResourceProperties']['BucketName']
                  if event['RequestType'] == 'Delete':
                      clean_up_bucket(bucket)
                  if event['RequestType'] == 'Update':
                      logger.info(f"custom::cleanupbucket update. Target bucket: {bucket}")
                  if event['RequestType'] == 'Create':
                      logger.info(f"custom::cleanupbucket create. Target bucket: {bucket}")
                  send_response_cfn(event, context, "SUCCESS")
              except Exception as e:
                  logger.info(str(e))
                  send_response_cfn(event, context, "FAILED")

          def send_response_cfn(event, context, response_status):
              response_body = {'Status': response_status,
                               'Reason': 'Log stream name: ' + context.log_stream_name,
                               'PhysicalResourceId': context.log_stream_name,
                               'StackId': event['StackId'],
                               'RequestId': event['RequestId'],
                               'LogicalResourceId': event['LogicalResourceId'],
                               'Data': json.loads("{}")}
              # Sends the response signal to the respective custom resource request
              requests.put(event['ResponseURL'], data=json.dumps(response_body))
      Description: cleanup Bucket on Delete Lambda Lambda function.
      Handler: index.handler
      Role: !GetAtt CleanupS3ExecutionRole.Arn
      Runtime: python3.7
      Timeout: 100

  CleanupS3ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  CleanupS3ExecutionPolicy:
    DependsOn:
      - CleanupS3ExecutionRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DeleteS3BucketLogsRolePolicy
      Roles:
        - Ref: CleanupS3ExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:*
            Resource:
              - arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - "*"

  # ---------------- S3 Bucket---------------------------------

  OpenVPNCertsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      # BucketName: !Ref OpenVPNCertBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

Outputs:

  CertsBucketName:
    Description: Name of FlasApi OpenVPN S3 Bucket holding the certs
    Value: !Ref OpenVPNCertsBucket

  OpenVPNInstanceEIP:
    Description: OpenVPN Instance elastic IP address
    Value: !Ref EIP

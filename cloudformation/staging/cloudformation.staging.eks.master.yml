Description: >
  Turbine is the set of bare metals behind a simple yet complete and efficient Airflow setup.

  The project is intended to be easily deployed, making it great for testing, demos and
  showcasing Airflow solutions. It is also expected to be easily tinkered with, allowing
  it to be used in real production environments with little extra effort.

Parameters:

#  EcrRepoPrefix:
#    Description: The full name of the newly created registry. i.e. 123456789.dkr.ecr.eu-central-1.amazonaws.com
#    Type: String

  VpnAccessKey:
    Description: Create Keypair for the Bastion Host manually and provide its name here
    Type: String

  LocalBaseIp:
    Description: The Ip for which you want to allow the VPN being used from
    Type: String

  AirflowDeployBucket:
    Description: Name of the S3 bucket containing the CodeDeploy packages
    Type: String

  CloudformationBucket:
    Description: Templates and logs
    Type: String

Resources:

  EksAirflowVpc:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.eu-central-1.amazonaws.com/eksairflow-cloudformation-eu-central-1/staging/cloudformation.staging.eks.vpc.yml
      Parameters:
        ProjectNamePrefix: !Ref AWS::StackName
        VpcCidrBlock: 10.0.0.0/16
        DummySubnetBlock: 10.0.99.0/24
        StackSubnetBlock: 10.0.0.0/24

  BaseTurbine:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.eu-central-1.amazonaws.com/eksairflow-cloudformation-eu-central-1/staging/cloudformation.staging.turbine.base.yml
      Parameters:
        ProjectNamePrefix: !Ref AWS::StackName
        CfnLogsBucket: !Ref CloudformationBucket
        CodeDeployBucket: !Ref AirflowDeployBucket
        TargetVpc: !GetAtt EksAirflowVpc.Outputs.EksAirflowVpcOut
        VpcBaseCidr: 10.0.0.0/16
        DummySubnetBlock: 10.0.99.0/24
        StackSubnetBlock: 10.0.0.0/24
        AllowedSshBlock: !Ref LocalBaseIp
        AllowedWebBlock: !Ref LocalBaseIp
        # WebserverPort: 8080 (Default)
        KeyPair: !Ref VpnAccessKey
        # SchedulerInstanceType: t3.micro (Default)
        # WebserverInstanceType: t3.micro (Default)
        # WorkerInstanceType: t3.small (Default)
        # WorkerConcurrency: 1 (Default)
        # MinGroupSize: 0 (Default)
        # MaxGroupSize: 10 (Default)
        # ShrinkThreshold: 0.5 (Default)
        # GrowthThreshold: 0.9 (Default)
        # DbMasterUsername: airflow (Default)
        DbMasterPassword: super_secret
        # LoadExampleDags: False (Default)
        # LoadDefaultConns: False (Default)


  # ------------------ Master Deployment Cluster----------------------------

#  FlaskApiVpc:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: https://s3.eu-central-1.amazonaws.com/flaskapi-cloudformation-eu-central-1/staging/cloudformation.staging.ecs.vpc.yml
#      Parameters:
#        ProjectNamePrefix: !Ref AWS::StackName
#        VpcCidrBase: 172.16.248.0/21
#        PublicSubnetACidr:  172.16.248.0/25
#        PublicSubnetBCidr:  172.16.250.0/25
#        PrivateSubnetACidr: 172.16.249.128/25
#        PrivateSubnetBCidr: 172.16.251.128/25

#  FlaskApiSG:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: https://s3.eu-central-1.amazonaws.com/flaskapi-cloudformation-eu-central-1/staging/cloudformation.staging.ecs.sg.yml
#      Parameters:
#        ProjectNamePrefix: !Ref AWS::StackName
#        TargetVpc: !GetAtt FlaskApiVpc.Outputs.FlaskApiVpcOut
#        VpnBaseCidr: 172.16.248.0/21

#  FlaskApiAlb:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: https://s3.eu-central-1.amazonaws.com/flaskapi-cloudformation-eu-central-1/staging/cloudformation.staging.ecs.alb.yml
#      Parameters:
#        ProjectNamePrefix: !Ref AWS::StackName
#        TargetVpc: !GetAtt FlaskApiVpc.Outputs.FlaskApiVpcOut
#        TargetSubnets: !GetAtt FlaskApiVpc.Outputs.FlaskApiPrivateSubnetsOut
#        TargetSg: !GetAtt FlaskApiSG.Outputs.FlaskApiAlbSgName

#  FlaskApiEcsCluster:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: https://s3.eu-central-1.amazonaws.com/flaskapi-cloudformation-eu-central-1/staging/cloudformation.staging.ecs.cluster.yml
#      Parameters:
#        ProjectNamePrefix: !Ref AWS::StackName
#        ClusterAmiTypes: t2.micro
#        ClusterMinNodes: 2
#        # ClusterMaxNodes: 2
#        TargetVpc: !GetAtt FlaskApiVpc.Outputs.FlaskApiVpcOut
#        TargetSubnets: !GetAtt FlaskApiVpc.Outputs.FlaskApiPrivateSubnetsOut
#        TargetSg: !GetAtt FlaskApiSG.Outputs.FlaskApiEcsHostsSgName
#        EcsKeyPair: !Ref VpnAccessKey
#        CfnLogsBucket: !Ref CloudformationBucket
#      # Delay CREATE_COMPLETE signal for FlaskApi Services
#      TimeoutInMinutes: 6

  # NOTE: Some maintenance on the ECS cluster might require to actively shut down cluster nodes. If there
  # are tasks currently running on the target node, they need to be drained before the node termination.
#  FlaskApiMaintenanceHook:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: https://s3.eu-central-1.amazonaws.com/flaskapi-cloudformation-eu-central-1/staging/cloudformation.staging.ecs.hook.yml
#      Parameters:
#        ProjectNamePrefix: !Ref AWS::StackName
#        TargetCluster: !GetAtt FlaskApiEcsCluster.Outputs.FlaskApiEcsClusterOut
#        TargetAutoScalingGrp: !GetAtt FlaskApiEcsCluster.Outputs.TargetFlaskApiEcsAsg

  # ------------------ VPN Bastion Host--------------------------------------

  # NOTE: Placed in front of Deployment Cluster for allowing access to EcsSg
#  FlaskApiVpn:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: https://s3.eu-central-1.amazonaws.com/flaskapi-cloudformation-eu-central-1/staging/cloudformation.staging.ecs.vpn.yml
#      Parameters:
#        EC2VPNInstanceKeyName: !Ref VpnAccessKey
#        LocalConnectionIP: !Ref LocalBaseIp
#        TargetVpc: !GetAtt FlaskApiVpc.Outputs.FlaskApiVpcOut
#        TargetSubnet: !GetAtt FlaskApiVpc.Outputs.FlaskApiPublicSubnetAOut


  # ------------------- Templates Bucket----------------------------

  # TODO: Use Ansible for automation outside of cloudformation
  # TODO: CloudTrail and Notification
  # Create and upload files manually
  # FlaskApiTemplateBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     AccessControl: Private
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #       - ServerSideEncryptionByDefault:
  #         SSEAlgorithm: AES256
  #   BucketName: flaskapi-cloudformation-eu-central-1
  #   PublicAccessBlockConfiguration:
  #     BlockPublicAcls: True
  #     BlockPublicPolicy: True
  #     IgnorePublicAcls: True
  #     RestrictPublicBuckets: True
  #   VersioningConfiguration:
  #     Status: Enabled

  # ------------------- Data Store Bucket---------------------------
  #  Resources section defines metadata for the Data Catalog
  #  Resources:
  #   CFNDataStore:
  #     Type: AWS::S3::Bucket
  #     Properties:
  #       AccessControl: Private
  #       BucketEncryption:
  #         ServerSideEncryptionConfiguration:
  #           - ServerSideEncryptionByDefault:
  #               SSEAlgorithm: AES256
  #       BucketName: !Ref CFNDataStoreName
  #       PublicAccessBlockConfiguration:
  #         BlockPublicAcls: True
  #         BlockPublicPolicy: True
  #         IgnorePublicAcls: True
  #         RestrictPublicBuckets: True
  #         # advanced list features
  #         InventoryConfigurations:
  #          - InventoryConfiguration
  #         LifecycleConfiguration:
  #           LifecycleConfiguration
